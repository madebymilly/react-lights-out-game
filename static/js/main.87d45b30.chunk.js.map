{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","coord","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","board","createBoard","hasWon","flipCellsAround","_this2","i","nrows","push","Array","from","length","ncols","v","chance","chanceLightStartsOn","Math","random","_this$props","tempBoard","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","y","x","flipCell","every","row","cell","setState","_this3","Fragment","key","j","src_Cell_0","concat","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.87d45b30.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe( this.props.coord );\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.3\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      board: this.createBoard(),\n      hasWon: false\n    }\n\n    this.flipCellsAround = this.flipCellsAround.bind(this)\n    \n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n\n    function getValue( chance ) {\n      return Math.random() < chance;\n    }\n\n    // Create array-of-arrays of true/false values\n    let board = [];\n    for (let i=0; i<this.props.nrows; i++) {\n      board.push(Array.from({length: this.props.ncols}, (v, i) => getValue( this.props.chanceLightStartsOn )));\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let tempBoard = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        tempBoard[y][x] = !tempBoard[y][x];\n      }\n    }\n\n    // Flip this cell and the cells around it\n    flipCell(y, x);\n    // Flip up cell:\n    flipCell(y-1, x);\n    // Flip right cell:\n    flipCell(y, x+1);\n    // Flip bottom cell:\n    flipCell(y+1, x);\n    // Flip left cell:\n    flipCell(y, x-1);\n\n    // Determine is the game has been won\n    // use every():\n    let hasWon = tempBoard.every( row => row.every(cell => cell === false))\n\n    this.setState({\n      board: tempBoard, \n      hasWon: hasWon\n    });\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n    return (\n      <>\n      {!this.state.hasWon \n      ? <table className=\"Board\">\n          <tbody>\n            {this.state.board.map((row, i) =>\n              <tr key={i}>\n                {row.map((cell, j) =>\n                  <Cell \n                    key={`${i}-${j}`} \n                    coord={`${i}-${j}`}\n                    isLit={cell} \n                    flipCellsAroundMe={this.flipCellsAround}\n                  />\n                )}\n              </tr>\n            )}\n          </tbody>\n        </table>\n      : <p>You have won the game!</p>\n      }\n      </>\n    )\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}